<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerIdleDown</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>objPlayer</parentName>
  <maskName>maskHuman</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///EXPLANATION OF OBJECT

/*
 * The player object uses a state machine model.
 * So it has a "state" variable, and does different things (in End Step)
 * depending on which state we are in.
 * The state enum is defined in objControl's create event.
 *
 * There are a number of scripts which this object calls for each state handle_&lt;state&gt;()
 * The weapon states (like shoot and hit) do pretty much nothing apart from
 * "activate" the ranged_weapon and melee_weapon objects
 * This makes it easy to add new weapons.
 * 
 * So ALL weapon logic is stored in the weapon objects, instead of in the
 * player object. The only code you want in this object is movement &amp; control code.
 * 
 */
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set controls
keyUp = ord('W');
keyDown = ord('S');
keyLeft = ord('A');
keyRight = ord('D');
keyHit = vk_space;
keyShootUp = vk_up;
keyShootDown = vk_down;
keyShootLeft = vk_left;
keyShootRight = vk_right;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set variables

///Velocity limits
v_max = 2;
///Friction
ground_frict = 0.25;
///Acceleration
ground_acc = 0.25;
///Facing direction
facing = facing.down;
///Misc
shoot_cooldown = 0;
max_hp = 20;
hp = 20;
invincible_when_hit = true; //do you become invincible for a time after being hit?
///Weapons
///If you want to add new weapons, or the ability to pick up new weapons
///you need to create a new object for each weapon, put all the logic in
///that object (like what happens when the player presses a shoot button)
///Duplicate objWeaponPistols/objWeaponSword and edit it to your liking.
ranged_weapon = instance_create(0, 0, objWeaponPistols);
melee_weapon = instance_create(0, 0, objWeaponSword);
///Set state
state = state.idle;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set stats

///Melee Stats
MeleeDamage = 0;
MeleePushback = 0;
MeleeSpeed = 1;

///Ranged Stats
RangedDamage = 0;
RangedPushback = 0;
RangedSpeed = 1;

/// ^ each weapon has a different amount of damage &amp; pushback,
///   these player stats are ON TOP OF the base weapon stats.
///   so if the player's melee damage is 10, you'll do
///   the weapon's damage PLUS 10.

///Movement Stats
RunSpeed = 2;
ShootRunSpeed = 0;
Acceleration = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create death effect
var a = create_effect(x, y, sprSplat3, 0.5, blood_colour);
var k = 0.25;
a.vx = vx*k;
a.vy = vy*k;
repeat(15)
{
    var a = instance_create(x, y, objGuts);
    k = .75;
    a.vx += vx*k;
    a.vy += vy*k;
    a.blood_colour = blood_colour;
}
///Destroy weapons
with (melee_weapon)
{
    instance_destroy();
}
with (ranged_weapon)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keyboard controls
if (state == state.idle ||
    state == state.run ||
    state == state.shoot)
{
    var kShootUp = keyboard_check(keyShootUp);
    var kShootDown = keyboard_check(keyShootDown);
    var kShootLeft = keyboard_check(keyShootLeft);
    var kShootRight = keyboard_check(keyShootRight);
    if ((kShootUp || kShootDown || kShootLeft || kShootRight) &amp;&amp; ranged_weapon != noone)
    {
        //Change to stoot state if not already on it
        change_state(state.shoot);
        //Set facing direction depending on key pressed
        set_facing(kShootUp, kShootDown, kShootLeft, kShootRight);
        //Check if moving as well as shooting
        check_movement();
    }
    else
    {
        var kHit = keyboard_check_pressed(keyHit);
        if (kHit)
        {
            //Change to hit state if not already on it
            change_state(state.hit);
        }
        else
        {
            //Check for movement keys being pressed
            check_movement();
            if (move_left || move_right || move_up || move_down)
            {
                //Change to run state if not already on it
                change_state(state.run);
                //Set facing direction depending on movement direction
                set_facing(move_up, move_down, move_left, move_right);
            }
            else
            {
                //Change to idle state if not already on it
                change_state(state.idle);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle states
///Run different scripts depending on
///the current state
///"state" enum is set in the create event
switch (state)
{
    case state.idle:
        handle_idle();
        break;
    case state.run:
        handle_run();
        break;
    case state.hit:
        handle_hit();
        break;
    case state.shoot:
        handle_shoot();
        break;
}
///Do this for ALL states
///Reduce shooting cooldown
if (shoot_cooldown &gt;= 0)
{
    shoot_cooldown -= objControl.game_speed;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Test
if (objControl.test_mode)
{
    draw_text(x, y-20, string(state));
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
