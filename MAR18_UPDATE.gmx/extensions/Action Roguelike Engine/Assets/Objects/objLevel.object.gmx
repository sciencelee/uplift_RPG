<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>icoLevel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set variables
current_room = noone; //The current objRoom
grid_w = 0;
grid_h = 0;
room_w = 0;
room_h = 0;
// ^ these variables are all set in Room Start Event depending on th current room properties

check_timer = 0; //Timer for checking if the room is clear

player = noone; //Which object is the player object?!

player_enter = noone; //Which direction the player entered the room from

fps_list = ds_list_create();
fps_delay = 10;
fps_timer = fps_delay;
FPS = 0;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set alarm
alarm[0] = 10;

///Make player invisible so that we can't see him on the generation room
with (objPlayer)
{
    visible = false;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>objLevel</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create level grid

///Create the blank level grid
room_grid = ds_grid_create(global.level_width, global.level_height);

///Populate the grid with rooms!
generate_level();




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create objects
if (instance_exists(objPlayer))
{
    player = objPlayer;
    player.visible = true;
}
else
{
    player = instance_create(100, 100, objClive);
    var cam = instance_create(0, 0, objCamera);
    cam.target = player;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to level room
room_goto(roomLevel);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if enemies exist
if (check_timer &lt;= 0 &amp;&amp; check_timer != noone)
{
    check_room();
    check_timer = noone;
}
else
if (check_timer != noone)
{
    check_timer -= objControl.game_speed;
}

ds_list_add(fps_list, fps_real);
fps_timer--;
if (fps_timer &lt; 0)
{
    fps_timer = fps_delay;
    var a = 0;
    var s = ds_list_size(fps_list);
    for (var i = 0; i &lt; s; i++)
    {
        a += fps_list[|i];
    }
    ds_list_clear(fps_list);
    FPS = a/s;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set current room properties
if (room == roomLevel)
if (instance_exists(objRoom))
{
    var s = global.tile_size;
    
    ///Get current room
    current_room = room_grid[# current_x, current_y];
    with (objRoom)
    {
        current = false;
    }
    current_room.current = true;
    current_room.visited = true;
    current_room.seen = true;
    
    ///Set seen rooms
    if (current_room.door_left == objDoor)
    {
        room_grid[# current_x-1, current_y].seen = true;
    }
    if (current_room.door_right == objDoor)
    {
        room_grid[# current_x+1, current_y].seen = true;
    }
    if (current_room.door_up == objDoor)
    {
        room_grid[# current_x, current_y-1].seen = true;
    }
    if (current_room.door_down == objDoor)
    {
        room_grid[# current_x, current_y+1].seen = true;
    }
    
    ///Create transition
    instance_create(0, 0, objTransition);
    
    ///Set room properties
    grid_w = current_room.grid_w;
    grid_h = current_room.grid_h;
    room_w = (grid_w+1)*s;
    room_h = (grid_h+1)*s;
    
    ///Set player position
    if (current_room.start)
    {
        player.x = room_w/2;
        player.y = room_h/2;
    }
    var v = 30;
    switch (player_enter)
    {
        case facing.up:
            player.y = v;
            break;
        case facing.right:
            player.x = room_w-v;
            break;
        case facing.down:
            player.y = room_h-v;
            break;
        case facing.left:
            player.x = v;
            break;
    }
    
    ///Create room objects
    for (var xx = 0; xx &lt;= grid_w; xx++)
    for (var yy = 0; yy &lt;= grid_h; yy++)
    {
        var cx = xx*s+s/2;
        var cy = yy*s+s/2;
        ///Create floor
        instance_create(cx, cy, objFloor);
        ///Create everything else
        var a = instance_create(cx, cy, current_room.grid[# xx, yy]);
        a.grid_x = xx;
        a.grid_y = yy;
        a.parent_room = current_room;
    }
    
    ///Prompt the minimap to redraw
    if (global.minimap_on)
    {
        instance_create(0, 0, objMinimap);
    }
    
    ///Set check timer
    ///Which checks if enemies exist
    check_timer = room_speed/2;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HUD
if (global.show_current_level)
{
    draw_set_font(font0);
    var v = 6;
    var a = 0.7;
    draw_text_shadow(view_xview+v, view_yview+v, "Level "+string(global.lvl), c_white, c_black, a);
    if (instance_exists(player))
    {
        draw_sprite_healthbar(view_xview+v-2, view_yview+v+16, 5, sprHeart, player.hp, player.max_hp);
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Test mode
if (objControl.test_mode)
{
    draw_set_colour(c_red);
    with (objProjectile)
    {
        draw_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, true);
    }
    with (objEntity)
    {
        draw_set_colour(c_red);
        draw_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, true);
    }
    with (objWall)
    {
        draw_sprite_ext(mask_index, -1, x, y, 1, 1, image_angle, c_white, 1);
    }
    draw_set_colour(c_white);
    draw_text(view_xview+4, view_yview+50, string(round(FPS)));
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
